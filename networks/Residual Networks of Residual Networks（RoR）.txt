def conv3x3(in_channel,out_channel,stride=1):
 return nn.Conv2d(in_channel,out_channel,3,stride=stride,padding=1,bias=False)


class residual_block(nn.Module):
    def __init__(self,in_channel,out_channel,same_shape=True):
     super(residual_block,self).__init__()
     self.same_shape=same_shape
     stride=1 if self.same_shape else 2
     self.conv1=conv3x3(in_channel,out_channel,stride=stride)
     self.bn1=nn.BatchNorm2d(out_channel)
     self.conv2=conv3x3(out_channel,out_channel)  #这步卷积操作不改变大小
     self.bn2=nn.BatchNorm2d(out_channel)
     if not self.same_shape:
      self.conv3=nn.Conv2d(in_channel,out_channel,1,stride=stride)
    def forward(self,x):
     out=self.conv1(x)
     out=F.relu(self.bn1(out),True)
     out=self.conv2(out)
     out=F.relu(self.bn2(out),True)
     if not self.same_shape:
      x=self.conv3(x)
     return F.relu(x+out,True)


class resnet(nn.Module):
    def __init__(self,in_channel,num_classese,dayin=False):
        super(resnet,self).__init__()
        self.dayin=dayin
        
        self.block1=nn.Conv2d(in_channel,64,8,2)
        
        self.block_root=nn.Conv2d(64,256,1,8,1) #用于根级快捷链接
        self.block_2_level_A=nn.Conv2d(64,64,1,3,10)  #用于2级A快捷链接
        self.block_2_level_B=nn.Conv2d(64,128,1,2,)#用于2级B快捷链接
        self.block_2_level_C=nn.Conv2d(128,256,1,2,)#用于2级C快捷链接
        self.block2=nn.Sequential(
            nn.MaxPool2d(3,2),
            residual_block(64,64), #调用类：residual_block
            residual_block(64,64),
        )
        
        self.block3=nn.Sequential(
            residual_block(64,128,False),
            residual_block(128,128)
        )
        
        self.block4=nn.Sequential(
            residual_block(128,256,False),
            residual_block(256,256)
        )
        
        self.block5=nn.Sequential(
            residual_block(256,512,False),
            residual_block(512,512),
            nn.AvgPool2d(3)
        )
        
        self.classifier=nn.Linear(512,num_classese)
        
    def forward(self,x):
        x=self.block1(x)
        root_x=x  #创造根级快联
        level_2A=x #创造2级链接A
        
        root_x=self.block_root(root_x)
        level_2A=self.block_2_level_A(level_2A)
        #print(level_2A.shape)
        #print(root_x.shape)
        if self.dayin:
            print('b1 output:{}'.format(x.shape))
        x=self.block2(x)
        if self.dayin:
            print('b2 output:{}'.format(x.shape))
        x=x+level_2A #2级链接A
        
        level_2B=x #创造2级链接B
        #print(level_2B.shape)
        level_2B=self.block_2_level_B(level_2B)
        x=self.block3(x)
        if self.dayin:
            print('b3 output:{}'.format(x.shape))
        x=x+level_2B #2级链接B
        
        level_2C=x#创造2级链接C
        
        level_2C=self.block_2_level_C(level_2C)
       # print(level_2C.shape)
        x=self.block4(x)
        if self.dayin:
            print('b4 output:{}'.format(x.shape))
        x=x+level_2C  #2级链接C
        x=x+root_x  #  根级链接
        x=self.block5(x)
        if self.dayin:
            print('b5 output:{}'.format(x.shape))
        
        x=x.view(x.shape[0],-1)
        x=self.classifier(x)
        return x